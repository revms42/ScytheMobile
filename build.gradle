// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/com/google/**/*.class',
            'org/ajar/scythemobile/model/map/HexNeighbors.class' // Data classes shouldn't count toward code-coverage.
    ]

    ext.kotlin_version = '1.3.20'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'jacoco'

allprojects {
    apply plugin: 'jacoco'

    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 *  List of modules that require Jacoco
 */
def includedInJacocoFullReport = [
        'app',
]

/**
 *  Apply additional build steps to sub-projects
 */
subprojects { prj ->

    // Apply Jacoco only if the project is in the include list
    if (includedInJacocoFullReport.contains(prj.name)) {

        apply plugin: "jacoco"

        jacoco {
            version '$jacoco_version'
        }

        def variantName = ""
        def classDirectoriesString = "release"

        task jacocoReport(type: JacocoReport, dependsOn: "test${variantName.capitalize()}ReleaseUnitTest") {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
                csv.enabled = true
            }

            classDirectories = fileTree(
                    dir: "build/intermediates/classes/${classDirectoriesString}",
                    excludes: excludes
            ) + fileTree(
                    dir: "build/tmp/kotlin-classes/${classDirectoriesString}",
                    excludes: excludes
            )

            // sources
            sourceDirectories = files('src')
            executionData = files("build/jacoco/test${variantName.capitalize()}ReleaseUnitTest.exec")

        }
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        if (includedInJacocoFullReport.contains(prj.name)) {
            projects.add(prj)
        }
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    additionalSourceDirs = generateSourceFiles(projects)
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
    executionData = files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination 'build/reports/jacoco/full'
        }
        xml {
            enabled true
            destination 'build/reports/jacoco/full/jacocoFullReport.xml'
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData = files(executionData.findAll { it.exists() })
    }
}

/**
 *  Generate a FileCollection of all projects source files
 */
FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src")
    }

    return files(dirs)
}

/**
 *  Generate a FileCollection of all projects class files
 */
FileCollection generateClassDirs(Collection projects) {
    def tree = fileTree('directory does not exists') // I know it's ugly :)

    def classDirectoriesString = "release"

    projects.each { prj ->

        tree += fileTree(
                dir: "${prj.name}/build/intermediates/javac/${classDirectoriesString}",
                excludes: excludes
        )

        tree += fileTree(
                dir: "${prj.name}/build/tmp/kotlin-classes/${classDirectoriesString}",
                excludes: excludes
        )
    }

    return tree
}
